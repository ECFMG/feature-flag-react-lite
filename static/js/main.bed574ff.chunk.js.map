{"version":3,"sources":["../../src/feature-flag-context.tsx","../../src/feature-flag-provider.tsx","App.tsx","../../src/use-feature-flag.tsx","config/feature-flag-config.tsx","index.tsx"],"names":["initialContext","FeatureFlagList","GetFeatureFlagByName","Error","FeatureFlagsContext","createContext","useState","props","featureFlagList","setFeatureFlagList","cacheTimeout","isRendered","React","useEffect","setIntervalImmediately","GetFeatureFlags","func","setInterval","axios","cache","setupCache","maxAge","axiosRetry","retries","remoteFlags","a","adapter","options","url","res","console","FeatureFlagContext","value","name","result","i","getFeatureFlagByName","App","useContext","featureTwoValue","featureThreeValue","style","backgroundColor","color","featureFlagConfig","fallbackFlagValues","axiosRequestConfig","config","token","localStorage","getItem","headers","ReactDOM","render","document","getElementById"],"mappings":"0dAkBMA,EAAiB,CACrBC,qBADqB,EAErBC,qBANW,WACX,MAAM,IAAIC,MAAV,iEAQIC,EAAsBC,wBAA5B,G,ECEkD,SAAC,G,MACHC,mBAAmCC,SAA3B,oBAA/CC,OAAiBC,OAElBC,EAAgBH,SAAD,MAAkCA,SAAvD,MAA2C,IACrCI,EAAaC,YAAnB,GAEAC,qBAAU,W,IAGDF,EAAL,SACEG,GAAuB,WAAD,uBACFC,OADpBD,GAKH,S,kBACD,OAAO,WACLH,gBAXJE,IAeA,IAAMC,EAAyB,SAACE,EAAD,GAE7B,OADAA,IACOC,YAAYD,EAAnB,IAGFE,8CACE,2BAAWX,SAAP,mBACF,mB,gBAEWA,gCAJfW,sCAOA,IAAMC,EAAQC,qBAAW,CACvBC,OAAQX,IAGVY,IAAW,EAAD,EAAQ,CAAEC,QAAS,IAE7B,IAAMC,EAAc,EAAAC,EAAA,OAAa,CAC/BC,QAASP,EAAMO,UAGXX,EAAkB,WAAH,IACnB,IAAMY,EAAU,CACdC,IAAKrB,SAAaqB,K,uBAGDJ,EAAA,SACX,YAEJ,OADAf,EAAmBoB,EAAnBpB,MACOoB,EAAP,QAHe,OAKV,YACLC,mDACArB,EAAmBF,SAAnBE,wBAZe,oCAyBrB,OACE,kBAACsB,EAAD,UACEC,MAAO,CACL/B,gBADK,EAELC,qBAAsB,mBAXC,SAAC+B,G,MAC5B,MAAsB,MAAO,GAC7B,IAAIC,EAAM,UAAG1B,EAAA,mBAAkC,mBAAO2B,SAAP,YAArC,aAAG,EAAb,MAEA,OAAQD,GAAS,GAO2BE,CAAlB,MAGvB7B,EAPL,WC5Ea8B,EAbH,WAAO,IACTnC,ECDRoC,qBADsB,GDEdpC,qBACFqC,EAAkBrC,EAAqB,cACvCsC,EAAoBtC,EAAqB,gBAC/C,OACE,2DACqE,UAAvCA,EAAqB,cAA0B,wDAAoC,oDAAgC,6BADjJ,sBAEqB,8BAAOqC,GAAuB,6BAFnD,wBAGuB,0BAAME,MAAO,CAACC,gBAAgBF,EAAkBG,MAAM,UAAWH,K,wBEM7EI,EAN6B,CACxCzB,MAAO,IACPS,IAAK,+EACLiB,mB,MACAC,mBAZ0B,uCAAG,WAAOC,GAAP,eAAAtB,EAAA,6DACvBuB,EAAQC,aAAaC,QAAQ,kBAE/BH,EAAOI,QAAP,+BAA4CH,IAHnB,kBAKtBD,GALsB,2CAAH,uDCM9BK,IAASC,OACP,kBAAC,EAAD,CAAqBN,OAAQH,GAC3B,kBAAC,EAAD,OAEFU,SAASC,eAAe,W","file":"static/js/main.bed574ff.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport interface FeatureFlags {\n  FeatureFlags: {\n    Name: string\n    Value: string\n  }[]\n}\n\nexport interface FeatureFlagInterface {\n  FeatureFlagList:      FeatureFlags | undefined\n  GetFeatureFlagByName: (name: string) => string\n}\n\nconst stub = (): never => {\n  throw new Error('You forgot to wrap your component in <FeatureFlagProvider>.')\n}\n\nconst initialContext = {\n  FeatureFlagList:      undefined,\n  GetFeatureFlagByName: stub\n}\n\nconst FeatureFlagsContext = createContext<FeatureFlagInterface>(initialContext) \n\nexport default FeatureFlagsContext\n","import React, { FC, ReactNode, useState, useEffect } from 'react'\nimport axios, { AxiosRequestConfig } from 'axios'\nimport { setupCache } from 'axios-cache-adapter'\nimport axiosRetry from 'axios-retry'\nimport FeatureFlagContext, { FeatureFlags } from './feature-flag-context'\n\n/**\n * FeatureFlagConfig\n */\nexport interface FeatureFlagConfig {\n  /** maximum age for the cache (in milliseconds), defaults to 30 seconds */\n  cache?: number \n  /** url to retrieve the feature flags from */\n  url: string\n  /** if url cannot be reached, load local feature flags */\n  fallbackFlagValues: FeatureFlags\n\n  /** if making authenticated feature flag requests may need to add JWT to requests */\n  axiosRequestConfig?: ((config: AxiosRequestConfig) => Promise<AxiosRequestConfig>)\n}\nexport type FeatureFlagProps = {\n  config: FeatureFlagConfig\n  children: ReactNode\n}\n\nconst FeatureFlagProvider: FC<FeatureFlagProps> = ( props: FeatureFlagProps ): JSX.Element => {\n  const [featureFlagList, setFeatureFlagList] = useState<FeatureFlags | undefined>(props.config.fallbackFlagValues)\n\n  const cacheTimeout = !props.config.cache ? 30 * 1000 : props.config.cache\n  const isRendered = React.useRef(false) // Used to make Async code not get called on every render.\n\n  useEffect(() => {\n    ;(async () => {\n      // IIFE to make async code work in a non-async Functional Component\n      if (!isRendered.current) {\n        setIntervalImmediately(\n          async () => await GetFeatureFlags(),\n          cacheTimeout\n        )\n      }\n    })()\n    return () => {\n      isRendered.current = true\n    }\n  }, [])\n\n  const setIntervalImmediately = (func: any, interval: number) => {\n    func()\n    return setInterval(func, interval)\n  }\n\n  axios.interceptors.request.use(async (axiosConfig) => {\n    if (typeof props.config.axiosRequestConfig === 'undefined') {\n      return axiosConfig\n    }\n    return await props.config.axiosRequestConfig(axiosConfig)\n  })\n\n  const cache = setupCache({\n    maxAge: cacheTimeout\n  })\n\n  axiosRetry(axios, { retries: 3 })\n\n  const remoteFlags = axios.create({\n    adapter: cache.adapter\n  })\n\n  const GetFeatureFlags = async () => {\n    const options = {\n      url: props.config.url\n    }\n\n    var result = await remoteFlags(options)\n      .then((res) => {\n        setFeatureFlagList(res.data)\n        return res.data as FeatureFlags\n      })\n      .catch((ex: any) => {\n        console.error('Fallback to local feature flags', ex)\n        setFeatureFlagList(props.config.fallbackFlagValues)\n      })\n\n    return result\n  }\n\n  const getFeatureFlagByName = (name: string) => {\n    if (!featureFlagList) return ''\n    var result = featureFlagList.FeatureFlags.find((i) => i.Name === name)\n      ?.Value\n    return !result ? '' : result\n  }\n\n  return (\n    <FeatureFlagContext.Provider\n      value={{\n        FeatureFlagList: featureFlagList,\n        GetFeatureFlagByName: (name: string) => getFeatureFlagByName(name)\n      }}\n    >\n      {props.children}\n    </FeatureFlagContext.Provider>\n  )\n}\n\nexport default FeatureFlagProvider\n","import React from 'react'\n\nimport { useFeatureFlags } from 'feature-flag-react-lite'\n\nconst App = () => {\n  const { GetFeatureFlagByName } = useFeatureFlags()\n  const featureTwoValue = GetFeatureFlagByName(\"FeatureTwo\");\n  const featureThreeValue = GetFeatureFlagByName(\"FeatureThree\");\n  return (\n    <div>\n      Reading feature flag from: {GetFeatureFlagByName(\"FeatureOne\") === 'false'?<span>Local Default Settings</span>:<span>Remote Flag Source</span>}<br/>\n      Feature Two Value: <span>{featureTwoValue}</span><br/>\n      Feature Three Value: <span style={{backgroundColor:featureThreeValue,color:\"white\"}}>{featureThreeValue}</span>\n    </div>\n  )\n}\n\nexport default App","import { useContext } from 'react'\nimport FeatureFlagsContext, { FeatureFlagInterface } from './feature-flag-context'\n\nconst useFeatureFlags = (): FeatureFlagInterface =>\n  useContext(FeatureFlagsContext)\n\nexport default useFeatureFlags\n","import { AxiosRequestConfig } from 'axios';\nimport {FeatureFlagConfig} from 'feature-flag-react-lite';\nimport defaultValues from './feature-flag-default-values.json';\n\nvar addJwtToFeatureFlagRequest = async (config:AxiosRequestConfig) => {\n    const token = localStorage.getItem(\"AccessToken\");\n    if(token){\n        config.headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    return config\n}\n\nvar featureFlagConfig : FeatureFlagConfig = {\n    cache: 30 * 1000,\n    url: 'https://featureflagdemo.blob.core.windows.net/flags/hosted-sample-flags.json',\n    fallbackFlagValues: defaultValues,\n    axiosRequestConfig: addJwtToFeatureFlagRequest\n}\nexport default featureFlagConfig;","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport featureFlagConfig from './config/feature-flag-config';\nimport FeatureFlagProvider from 'feature-flag-react-lite';\n\n\nReactDOM.render(\n  <FeatureFlagProvider config={featureFlagConfig}>\n    <App />\n  </FeatureFlagProvider>\n, document.getElementById('root'))"],"sourceRoot":""}